import rclpy
from rclpy.node import Node
from rcl_interfaces.msg import ParameterDescriptor, SetParametersResult

class TrajPlannerNode(Node):
    def __init__(self):
        super().__init__('traj_planner_node')

        # ------------------------------------------
        # ROS2 Parameter Declaration: 'latency'
        # This replaces the ROS1 dynamic_reconfigure .cfg file
        # ------------------------------------------

        # Define a descriptor with a helpful description for tools
        latency_descriptor = ParameterDescriptor(
            description='Latency compensation for control'
        )

        # Declare the parameter in ROS2
        # Default value: 0.25 (same as in the .cfg file)
        self.declare_parameter(
            'latency',
            0.25,
            latency_descriptor
        )

        # Retrieve the parameter value (on node startup)
        self.latency = self.get_parameter('latency').value
        self.get_logger().info(f'Latency compensation set to {self.latency:.3f} seconds')

        # ------------------------------------------
        # Optional: Register callback to react to parameter updates
        # This enforces that latency must stay within [-1, 1]
        # ------------------------------------------
        self.add_on_set_parameters_callback(self.parameter_update_callback)

    def parameter_update_callback(self, params):
        for param in params:
            if param.name == 'latency' and param.type_ == param.Type.DOUBLE:
                if -1.0 <= param.value <= 1.0:
                    self.latency = param.value
                    self.get_logger().info(f'Latency updated to {self.latency:.3f} seconds')
                else:
                    self.get_logger().warn(f'Latency value {param.value} is out of bounds [-1, 1]')
                    return SetParametersResult(successful=False)
        return SetParametersResult(successful=True)
